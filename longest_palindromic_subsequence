// https://leetcode.com/problems/longest-palindromic-subsequence/

class Solution
{
public:
    int dp[1001][1001];
    int LPS(string &s, int i, int j)
    {
        if (i > j)
        {
            return 0;
        }
        if (i == j)
        {
            return 1;
        }
        if (dp[i][j] != -1)
        {
            return dp[i][j];
        }
        if (s[i] == s[j])
        {
            return dp[i][j] = 2 + LPS(s, i + 1, j - 1);
        }
        else
        {
            return dp[i][j] = max(LPS(s, i + 1, j), LPS(s, i, j - 1));
        }
    }

    int longestPalindromeSubseq(string s)
    {
        int m = s.length();
        memset(dp, -1, sizeof(dp));

        return LPS(s, 0, m - 1); // Approach-1
    }
};
