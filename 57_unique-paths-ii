// https://leetcode.com/problems/unique-paths-ii/

class Solution {
public:
    int m , n ;
    int dp[101][101] ;

    int f(int i , int j , vector<vector<int>>& obstacleGrid)
    {

        if(i >= m || j >= n || obstacleGrid[i][j] == 1)
        {
            return 0 ;
        }

        if(dp[i][j] != -1)
        {
            return dp[i][j] ;
        }

        if(i == m-1 && j == n-1)
        {
            return 1 ;
        }

        int right = f(i+1 , j , obstacleGrid) ;

        int down = f(i , j+1 , obstacleGrid) ;

        return dp[i][j] = right + down ;

    }
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        m = obstacleGrid.size() ;
        n = obstacleGrid[0].size() ;

        memset(dp , -1 , sizeof(dp)) ;

        return f(0 , 0 , obstacleGrid) ;
    }
};
