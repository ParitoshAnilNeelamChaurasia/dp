// https://leetcode.com/problems/reducing-dishes/description/

class Solution {
public:
    int n ;

    int f(int ind , vector<int>& satisfaction , int t , vector<vector<int>> &dp)
    {
        if(ind >= n)
        {
            return 0 ;
        }

        if(dp[ind][t] != -1)
        return dp[ind][t] ;

        int take = f(ind+1 , satisfaction , t+1 , dp) + satisfaction[ind] * (t);

        int not_take = f(ind+1 , satisfaction , t , dp) ;

        return dp[ind][t] = max({0 , take , not_take}) ;

    }
    int maxSatisfaction(vector<int>& satisfaction) {
        n = satisfaction.size() ;

        sort(satisfaction.begin() , satisfaction.end()) ;

        vector<vector<int>>dp(n+1,vector<int>(n+1,-1)) ;

        return f(0 , satisfaction , 1 , dp) ;
    }
};
