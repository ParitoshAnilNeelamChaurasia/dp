// https://leetcode.com/problems/unique-paths/description/

class Solution
{
public:
    int dp[101][101];
    int f(int i, int j, int m, int n, vector<vector<int>> &grid)
    {
        if (i == m - 1 || j == n - 1)
        {
            return 1;
        }
        if (dp[i][j] != -1)
        {
            return dp[i][j];
        }

        if (i > m - 1 && j > m - 1)
        {
            return 0;
        }

        int right = f(i + 1, j, m, n, grid);
        int down = f(i, j + 1, m, n, grid);

        return dp[i][j] = right + down;
    }
    int uniquePaths(int m, int n)
    {

        vector<vector<int>> grid(m, vector<int>(n, -1));

        memset(dp, -1, sizeof(dp));
        return f(0, 0, m, n, grid);
    }
};
