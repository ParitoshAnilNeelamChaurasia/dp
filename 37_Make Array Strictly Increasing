// https://leetcode.com/problems/make-array-strictly-increasing/

class Solution {
public:

    map<pair<int,int>,int> mp ;

    int f(int ind , vector<int>& arr1, vector<int>& arr2 , int prev)
    {
        // all elements exhausted
        if(ind >= arr1.size())
        {
            return 0 ;
        }

        if(mp.find({ind , prev}) != mp.end())
        {
            return mp[{ind,prev}] ;
        }

        int res1 = 1e9+1 ;

        if(arr1[ind] > prev)
        {
            res1 = f(ind+1 , arr1 , arr2 , arr1[ind]) ;
        }

        int res2 = 1e9+1 ;

        auto it = upper_bound(arr2.begin() , arr2.end() , prev) ;

        if(it != arr2.end())
        {
            int j = it - arr2.begin() ; // finding index

            // CANT DO THIS BECAUSE WE PASS ARRAYS BY REFERENCE -> CAN CHANGE WHOLE ARRAY
            
            // replacing the current element with arr2[j]
            // arr1[ind] = arr2[j] ;  

            res2 = 1 + f(ind+1 , arr1, arr2 , arr2[j]) ;
        }
        return mp[{ind,prev}] = min(res1 , res2) ;
    }
    int makeArrayIncreasing(vector<int>& arr1, vector<int>& arr2) {

        mp.clear() ;

        sort(arr2.begin() , arr2.end()) ;

        int res = f(0 , arr1 , arr2 , INT_MIN) ;

        if(res == 1e9+1)
        {
            return -1 ;
        }
        return res ;
    }
};
