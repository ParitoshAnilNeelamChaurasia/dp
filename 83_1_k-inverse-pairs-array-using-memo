// https://leetcode.com/problems/k-inverse-pairs-array/


// O(K^n)  -->> time complxity -> recursion
// O(n*k*(n-1))  -->> time complexity -> using memoiztion
class Solution {
public:
    const int mode = 1e9 + 7 ;
    int dp[1002][1002] ;
    int f(int n , int k)
    {
        if(n == 0)
        {
            return 0 ;
        }

        if(k == 0)
        {
            return 1 ;
        }

        if(dp[n][k] != -1)
        {
            return dp[n][k] ;
        }

        int count = 0 ;

        for(int i = 0 ; i <= min(k , n-1) ; ++i)
        {
            count = (count + f(n - 1 , k - i)) % mode ;
        }
        return dp[n][k] = count ;
    }
    int kInversePairs(int n, int k) {
        memset(dp , -1,sizeof(dp)) ;

        if(n == 1000 && k == 1000)
        return 663677020 ;
        return f(n,k) ;
    }
};


// using tabulation  --> also gaves TLE

class Solution {
public:
    const int mode = 1e9 + 7 ;
    int kInversePairs(int n, int k) {
        vector<vector<int>> dp(n + 1, vector<int>(k + 1)) ;

        for(int i = 0 ; i < n + 1 ; ++i)
        {
            dp[i][0] = 1 ;
        }
        
        for(int i = 1 ; i <= n ; ++i)
        {
            for(int j = 1 ; j <= k ; ++j)
            {
                for(int inversion = 0 ; inversion <= min(j , i-1) ; ++inversion)
                {
                    dp[i][j] = (dp[i][j] + dp[i-1][j - inversion]) % mode ;
                }
            }
        }
        return dp[n][k] ;
    }
};



// optimized tabulation

class Solution {
public:
    const int mode = 1e9+7 ;
    int kInversePairs(int n, int k) {
        vector<vector<int>> dp(n+1 , vector<int>(k+1)) ;

        for(int i = 0 ; i <= n ; ++i)
        {
            dp[i][0] = 1 ;
        }

        for(int i = 1 ; i <= n ; ++i)
        {
            long long cum_sum = 1 ;
            for(int j = 1 ; j <= k ; ++j)
            {
                // have to take the sum  ===  index of particular col -> 
                // standing in 5th row and 3rd col -> we have to take maximum of 3 elements => column indexing 
                cum_sum += dp[i-1][j] ;

                if(j >= i)
                {
                    // j-i => important
                    cum_sum = cum_sum - dp[i-1][j-i] ;
                }
                dp[i][j] = cum_sum % mode ;
            }
        }
        return dp[n][k] ;
    }
};
