// https://leetcode.com/problems/perfect-squares/

class Solution {
public:
    int dp[10001] ;
    int f(int n)
    {
        if(n == 0)
        {
            return 0 ;
        }

        if(dp[n] != -1)
        {
            return dp[n] ;
        }

        int ans = INT_MAX ;

        for(int i = 1 ; i*i <= n ; ++i)
        {
            int res = 1 + f(n - i*i) ;
            ans = min(ans , res) ;
        }

        return dp[n] = ans ;
    }
    int numSquares(int n) {
        memset(dp,-1,sizeof(dp)) ;
        return f(n) ;
    }
};

// Tabulation

class Solution {
public:
    int numSquares(int n) {
        
        vector<int> dp(n+1 , 100000) ;

        dp[0] = 0 ;

        for(int i = 1 ; i <= n ; ++i)
        {
            for(int j = 1 ; j*j <= i ; ++j)
            {
                dp[i] = min(dp[i] , 1 + dp[i - j*j]) ;

            }
        }

        return dp[n] ;
    }
};
