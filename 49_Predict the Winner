// https://leetcode.com/problems/predict-the-winner/description/

class Solution {
public:
    int n;

    

    int f(int i, int j, vector<int>& nums , vector<vector<int>> &dp) {
        if (i > j) {
            return 0;
        }
        if(dp[i][j] != -1)
        return dp[i][j] ;
        if (i == j) {
            return nums[i];
        }

        int take_i = nums[i] + min(f(i + 2, j, nums , dp), f(i + 1, j - 1, nums , dp ));
        int take_j = nums[j] + min(f(i, j - 2, nums , dp), f(i + 1, j - 1, nums , dp));

        return dp[i][j] = max(take_i, take_j);
    }

    bool predictTheWinner(vector<int>& nums) {
        n = nums.size();

        vector<vector<int>>dp(n , vector<int>(n,-1)) ;

        int sum = accumulate(nums.begin(), nums.end(), 0);
        int p1 = f(0, n - 1, nums , dp);
        int p2 = sum - p1;

        return p1 >= p2;
    }
};
