(* https://leetcode.com/problems/minimum-path-sum/description/ *)

class Solution {
public:
    int m, n;

    int f(int i, int j, vector<vector<int>>& grid ,  vector<vector<int>> &dp) 
    {
        if (i == m - 1 && j == n - 1) 
        {
            return grid[i][j];
        }

        if(dp[i][j] != -1)
        return dp[i][j] ;

        int down = INT_MAX, right = INT_MAX;

        // Move down if within bounds
        if (i + 1 < m) {
            down = f(i + 1, j, grid , dp);
        }

        // Move right if within bounds
        if (j + 1 < n) {
            right = f(i, j + 1, grid , dp);
        }

        // Return the minimum path sum including the current cell
        return dp[i][j] = grid[i][j] + min(down, right);
    }

    int minPathSum(vector<vector<int>>& grid) {
        m = grid.size();
        n = grid[0].size();

        vector<vector<int>> dp(m+1 , vector<int>(n,-1)) ;

        return f(0, 0, grid , dp);
    }
};
